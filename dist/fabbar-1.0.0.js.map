{"version":3,"sources":["index.jsx"],"names":["FAB","_ref","staticLabel","style","href","_ref$target","target","undefined","icon","label","primary","_ref$staticLabel","onClick","React","createElement","aria-label","className","class","open","alwaysOpen","_React$Component","direction","FABBarModal","props","_classCallCheck","this","_this","setTimeout","key","value","_this2","setState","prevState","scrollHandler","closeOnScroll","window","removeEventListener","openClose","addEventListener","classes","bind","primaryActive","primaryAction","isModal","openOnHover","actions","staticLabels","state","role","aria-expanded","aria-orientation","orientation","aria-haspopup","onMouseEnter","action","onMouseLeave","url","_this4","button","slice","map","Component","container","document","_inherits","FABBar","__proto__","Object","getPrototypeOf","call","_this5","rootSelector","querySelector","_createClass"],"mappings":"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","file":"fabbar-1.0.0.js","sourcesContent":["/**\n * This FAB-bar exposes a row of secondary FAB buttons when clicked or on hover.\n *\n * You can choose in which direction the secondary buttons goes with a parameter.\n * Position of the FAB-bar is done with CSS. In this example, I use the style\n * classes upperLeft, lowerRight, etc ... but that is up to whoever uses this\n * component.\n *\n * The actions are given by an array of objects:\n *\n * { action, icon, label, url, target }\n *\n * action is a js function executed on click. If given an url, the button is\n * turned in to a normal link (able to right-click > Open Link in New Tab).\n * This link can also be given a target (optional).\n *\n * The icon must be a Material Icons icon, only using the text content.\n *\n * Per default, clicking on any secondary button closes the FAB bar again. This\n * can be avoided by giving an function as action that returns true.\n *\n * The secondary buttons can be used both as links, function buttons and both.\n *\n * The primary button can turn into a action button, with the attribute\n * primaryAction set to true. This uses the first given action as the primary\n * action.\n *\n * When setting openOnHover or alwaysOpen to true, the primary button will\n * always work as an action button.\n *\n * alwaysOpen will show all the buttons ALL THE TIME.\n *\n *\n * TODO:\n * - Clicking outside FAB Speed Dial closes it.\n * - On mobile, white transparent overlay on whole screen.\n * - Different color when button is active.\n *\n */\n\nfunction FAB({style, onClick, href, target = '', icon, label, primary, staticLabel=false}) {\n  return (\n    <a style={style}\n       role=\"menuitem\"\n       href={href}\n       target={target}\n       aria-label={label}\n       onClick={onClick}\n       className={'tlx-material-fab-button ' + (primary ? 'primary' : 'secondary')}>\n      <i className=\"material-icons tlx-fab-bar--icon\">{icon}</i>\n      {staticLabel ? <span class=\"tlx-fab-bar--label\">{label}</span> : null}\n    </a>\n  );\n}\n\nclass FABBarModal extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: props.alwaysOpen,\n      direction: props.direction || 'up',\n      primaryActive: false\n    };\n  }\n\n  // Open/closes the FAB Bar\n  openClose() {\n    this.setState(prevState => ({open: !prevState.open}));\n    if(this.props.primaryAction || this.props.openOnHover || this.props.direction === 'menu') {\n      setTimeout(() => this.setState(prevState => ({primaryActive: prevState.open})), 100);\n    }\n  }\n\n  componentDidMount() {\n    if(this.props.closeOnScroll) {\n      this.scrollHandler = () => {\n        this.state.open && this.openClose();\n      };\n      window.addEventListener('scroll', this.scrollHandler);\n    }\n  }\n\n  componentWillUnmount() {\n    if(this.props.closeOnScroll) {\n      window.removeEventListener('scroll', this.scrollHandler);\n    }\n  }\n\n  render() {\n    const openClose = this.openClose.bind(this);\n    const props = this.props;\n    const orientation = props.direction === 'up' || props.direction === 'down' ? 'vertical' : 'horizontal';\n    const primaryAction = props.primaryAction || props.alwaysOpen || props.openOnHover;\n    const primary = primaryAction ? props.actions[0] : {};\n    const staticLabels = this.props.direction === 'menu';\n\n    const classes = [\n      'tlx-fab-bar',\n      'tlx-fab-bar--' + (this.state.open ? 'open' : 'closed'),\n      'tlx-fab-bar--' + props.direction,\n      // This style class is inserted/removed 100ms after menu is open/closed\n      // For making animations betterish\n      this.state.primaryActive ? 'tlx-fab-bar--primaryActive' : '',\n      props.className\n    ].join(' ');\n\n\n    return (\n      [this.props.isModal ? <div class={'tlx-fab-bar-overlay tlx-fab-bar-overlay' + (this.state.open ? '--open' : '--closed')} onClick={openClose}></div> : null,\n      <div className={classes}\n           role=\"toolbar\"\n           aria-expanded={this.state.open}\n           aria-orientation={orientation}\n           aria-haspopup=\"true\"\n           onMouseEnter={\n             props.openOnHover && !props.alwaysOpen ? openClose : undefined\n           }\n           onMouseLeave={\n             props.openOnHover && !props.alwaysOpen ? openClose : undefined\n           }>\n\n        <FAB icon={this.state.primaryActive || props.alwaysOpen ? primary.icon : 'close' }\n             href={primary.url}\n             target={primary.target}\n             label={primary.label || props.label}\n             staticLabel={staticLabels}\n             primary=\"true\"\n             onClick={() => {\n               (this.state.primaryActive || props.alwaysOpen) && primary.action && primary.action();\n               if(props.openOnHover || this.props.alwaysOpen) return;\n               openClose();\n             }} />\n\n         <div className=\"tlx-fab-bar--link-container\">\n        {props.actions.slice(primaryAction ? 1 : 0).map(\n          button => {\n            function onClick() {\n              if(props.openOnHover || props.alwaysOpen) {\n                button.action && button.action();\n                return;\n              }\n              const ceepOpen = button.action && button.action();\n              if(!ceepOpen) {\n                openClose();\n              }\n            }\n\n            return <FAB icon={button.icon}\n                        href={button.url}\n                        target={button.target}\n                        staticLabel={staticLabels}\n                        label={button.label}\n                        onClick={onClick} />;\n        })}\n         </div>\n      </div>]\n    );\n  }\n}\n\nclass FABBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.rootSelector = document.querySelector('body');\n    this.container = document.createElement('div');\n  }\n\n  componentDidMount() {\n    this.rootSelector.appendChild(this.container);\n  }\n\n  componentWillUnmount() {\n    this.rootSelector.removeChild(this.container);\n  }\n\n  render () {\n    return ReactDOM.createPortal(<FABBarModal {...this.props} />, this.container);\n  }\n}\n"]}